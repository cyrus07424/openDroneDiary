package routing

import io.ktor.server.response.*
import io.ktor.server.routing.*
import io.ktor.server.request.*
import io.ktor.server.sessions.*
import io.ktor.http.*
import com.opendronediary.model.FlightLog
import com.opendronediary.model.UserSession
import com.opendronediary.service.FlightLogService
import io.ktor.server.html.respondHtml
import kotlinx.html.*
import utils.GTMHelper.addGTMBodyScript
import utils.PolicyHelper.addFooter

fun Route.configureFlightLogRouting(flightLogService: FlightLogService) {
    // È£õË°åË®òÈå≤ CRUD - Authentication required
    route("/flightlogs") {
        get {
            val session = call.sessions.get<UserSession>()
            if (session == null) {
                call.respond(HttpStatusCode.Unauthorized)
                return@get
            }
            call.respond(flightLogService.getAllByUserId(session.userId))
        }
        get("/{id}") {
            val session = call.sessions.get<UserSession>()
            if (session == null) {
                call.respond(HttpStatusCode.Unauthorized)
                return@get
            }
            val id = call.parameters["id"]?.toIntOrNull()
            val flightLog = id?.let { flightLogService.getByIdAndUserId(it, session.userId) }
            if (flightLog != null) {
                call.respond(flightLog)
            } else {
                call.respond(HttpStatusCode.NotFound)
            }
        }
        post {
            val session = call.sessions.get<UserSession>()
            if (session == null) {
                call.respond(HttpStatusCode.Unauthorized)
                return@post
            }
            val contentType = call.request.contentType()
            if (contentType.match(ContentType.Application.FormUrlEncoded)) {
                val params = call.receiveParameters()
                val flightDate = params["flightDate"] ?: ""
                val takeoffLandingLocation = params["takeoffLandingLocation"] ?: ""
                val takeoffLandingTime = params["takeoffLandingTime"] ?: ""
                val flightDuration = params["flightDuration"] ?: ""
                val pilotName = params["pilotName"] ?: ""
                val issuesAndResponses = params["issuesAndResponses"]
                val created = flightLogService.add(FlightLog(0, flightDate, takeoffLandingLocation, takeoffLandingTime, flightDuration, pilotName, issuesAndResponses, session.userId))
                call.respondRedirect("/flightlogs/ui")
            } else {
                val flightLog = call.receive<FlightLog>()
                val created = flightLogService.add(flightLog.copy(userId = session.userId))
                call.respond(HttpStatusCode.Created, created)
            }
        }
        put("/{id}") {
            val session = call.sessions.get<UserSession>()
            if (session == null) {
                call.respond(HttpStatusCode.Unauthorized)
                return@put
            }
            val id = call.parameters["id"]?.toIntOrNull()
            val flightLog = call.receive<FlightLog>()
            if (id != null && flightLogService.update(id, flightLog, session.userId)) {
                call.respond(HttpStatusCode.OK)
            } else {
                call.respond(HttpStatusCode.NotFound)
            }
        }
        delete("/{id}") {
            val session = call.sessions.get<UserSession>()
            if (session == null) {
                call.respond(HttpStatusCode.Unauthorized)
                return@delete
            }
            val id = call.parameters["id"]?.toIntOrNull()
            if (id != null && flightLogService.delete(id, session.userId)) {
                call.respond(HttpStatusCode.NoContent)
            } else {
                call.respond(HttpStatusCode.NotFound)
            }
        }
    }
    // È£õË°åË®òÈå≤ UI (HTMLÁîªÈù¢) - Authentication required
    route("/flightlogs/ui") {
        get {
            val session = call.sessions.get<UserSession>()
            if (session == null) {
                call.respondRedirect("/login")
                return@get
            }
            val flightLogs = flightLogService.getAllByUserId(session.userId)
            call.respondHtml {
                head { bootstrapHead("È£õË°åË®òÈå≤‰∏ÄË¶ß") }
                body(classes = "d-flex flex-column min-vh-100") {
                    addGTMBodyScript()
                    nav(classes = "navbar navbar-expand-lg navbar-dark bg-dark") {
                        div(classes = "container") {
                            a(href = "/", classes = "navbar-brand") { +"üõ©Ô∏è OpenDroneDiary" }
                            div(classes = "navbar-nav ms-auto") {
                                span(classes = "navbar-text me-3") { +"„É≠„Ç∞„Ç§„É≥‰∏≠: ${session.username}" }
                                a(href = "/logout", classes = "btn btn-outline-light btn-sm") { +"„É≠„Ç∞„Ç¢„Ç¶„Éà" }
                            }
                        }
                    }
                    div(classes = "container mt-4") {
                        div(classes = "row") {
                            div(classes = "col-12") {
                                div(classes = "card") {
                                    div(classes = "card-header d-flex justify-content-between align-items-center") {
                                        h1(classes = "card-title mb-0") { +"È£õË°åË®òÈå≤‰∏ÄË¶ß" }
                                        a(href = "/", classes = "btn btn-outline-primary btn-sm") { +"„Éà„ÉÉ„Éó„Å∏" }
                                    }
                                    div(classes = "card-body") {
                                        if (flightLogs.isEmpty()) {
                                            div(classes = "alert alert-info") { +"„Åæ„Å†È£õË°åË®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ‰∏ã„ÅÆ„Éï„Ç©„Éº„É†„Åã„ÇâÊñ∞Ë¶è‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" }
                                        } else {
                                            div(classes = "table-responsive") {
                                                table(classes = "table table-striped table-hover") {
                                                    thead(classes = "table-dark") {
                                                        tr {
                                                            th { +"ID" }
                                                            th { +"È£õË°åÊó•" }
                                                            th { +"Èõ¢ÁùÄÈô∏Â†¥ÊâÄ" }
                                                            th { +"ÊôÇÂàª" }
                                                            th { +"È£õË°åÊôÇÈñì" }
                                                            th { +"ÊìçÁ∏¶ËÄÖ" }
                                                            th(classes = "text-center") { +"Êìç‰Ωú" }
                                                        }
                                                    }
                                                    tbody {
                                                        flightLogs.forEach { flightLog ->
                                                            tr {
                                                                td { +flightLog.id.toString() }
                                                                td { +flightLog.flightDate }
                                                                td { +flightLog.takeoffLandingLocation }
                                                                td { +flightLog.takeoffLandingTime }
                                                                td { +flightLog.flightDuration }
                                                                td { +flightLog.pilotName }
                                                                td(classes = "text-center") {
                                                                    a(href = "/flightlogs/ui/${flightLog.id}", classes = "btn btn-sm btn-outline-primary me-2") { +"Á∑®ÈõÜ" }
                                                                    form(action = "/flightlogs/ui/${flightLog.id}", method = FormMethod.post, classes = "d-inline") {
                                                                        hiddenInput { name = "_method"; value = "delete" }
                                                                        submitInput(classes = "btn btn-sm btn-outline-danger") { 
                                                                            value = "ÂâäÈô§"
                                                                            attributes["onclick"] = "return confirm('Êú¨ÂΩì„Å´ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                div(classes = "card mt-4") {
                                    div(classes = "card-header") {
                                        h2(classes = "card-title mb-0") { +"Êñ∞Ë¶èÈ£õË°åË®òÈå≤‰ΩúÊàê" }
                                    }
                                    div(classes = "card-body") {
                                        form(action = "/flightlogs", method = FormMethod.post) {
                                            div(classes = "row") {
                                                div(classes = "col-md-6 mb-3") {
                                                    label(classes = "form-label") { +"È£õË°åÂπ¥ÊúàÊó•" }
                                                    textInput(classes = "form-control") { 
                                                        name = "flightDate"
                                                        type = InputType.date
                                                        required = true
                                                    }
                                                }
                                                div(classes = "col-md-6 mb-3") {
                                                    label(classes = "form-label") { +"Èõ¢ÁùÄÈô∏Â†¥ÊâÄ" }
                                                    textInput(classes = "form-control") { 
                                                        name = "takeoffLandingLocation"
                                                        placeholder = "Èõ¢ÁùÄÈô∏Â†¥ÊâÄ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                        required = true
                                                    }
                                                }
                                            }
                                            div(classes = "row") {
                                                div(classes = "col-md-6 mb-3") {
                                                    label(classes = "form-label") { +"Èõ¢ÁùÄÈô∏ÊôÇÂàª" }
                                                    textInput(classes = "form-control") { 
                                                        name = "takeoffLandingTime"
                                                        type = InputType.time
                                                        required = true
                                                    }
                                                }
                                                div(classes = "col-md-6 mb-3") {
                                                    label(classes = "form-label") { +"È£õË°åÊôÇÈñì" }
                                                    textInput(classes = "form-control") { 
                                                        name = "flightDuration"
                                                        placeholder = "‰æã: 1ÊôÇÈñì30ÂàÜ"
                                                        required = true
                                                    }
                                                }
                                            }
                                            div(classes = "row") {
                                                div(classes = "col-md-6 mb-3") {
                                                    label(classes = "form-label") { +"È£õË°å„Åï„Åõ„ÅüËÄÖ„ÅÆÊ∞èÂêç" }
                                                    textInput(classes = "form-control") { 
                                                        name = "pilotName"
                                                        placeholder = "ÊìçÁ∏¶ËÄÖÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                        required = true
                                                    }
                                                }
                                                div(classes = "col-md-6 mb-3") {
                                                    label(classes = "form-label") { +"‰∏çÂÖ∑Âêà„ÇÑ„Åù„ÅÆÂØæÂøúÔºà‰ªªÊÑèÔºâ" }
                                                    textInput(classes = "form-control") { 
                                                        name = "issuesAndResponses"
                                                        placeholder = "‰∏çÂÖ∑Âêà„Åå„ÅÇ„Çå„Å∞Ë®òËºâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                    }
                                                }
                                            }
                                            div(classes = "d-grid") {
                                                submitInput(classes = "btn btn-success") { value = "È£õË°åË®òÈå≤„ÇíËøΩÂä†" }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    addFooter()
                }
            }
        }
        get("/{id}") {
            val session = call.sessions.get<UserSession>()
            if (session == null) {
                call.respondRedirect("/login")
                return@get
            }
            val id = call.parameters["id"]?.toIntOrNull()
            val flightLog = id?.let { flightLogService.getByIdAndUserId(it, session.userId) }
            if (flightLog == null) {
                call.respond(HttpStatusCode.NotFound)
                return@get
            }
            call.respondHtml {
                head { bootstrapHead("È£õË°åË®òÈå≤Á∑®ÈõÜ") }
                body {
                    addGTMBodyScript()
                    nav(classes = "navbar navbar-expand-lg navbar-dark bg-dark") {
                        div(classes = "container") {
                            a(href = "/", classes = "navbar-brand") { +"üõ©Ô∏è OpenDroneDiary" }
                            div(classes = "navbar-nav ms-auto") {
                                a(href = "/flightlogs/ui", classes = "btn btn-outline-light btn-sm me-2") { +"‰∏ÄË¶ß„Å∏Êàª„Çã" }
                                a(href = "/logout", classes = "btn btn-outline-light btn-sm") { +"„É≠„Ç∞„Ç¢„Ç¶„Éà" }
                            }
                        }
                    }
                    div(classes = "container mt-4") {
                        div(classes = "row justify-content-center") {
                            div(classes = "col-md-8") {
                                div(classes = "card") {
                                    div(classes = "card-header") {
                                        h1(classes = "card-title mb-0") { +"È£õË°åË®òÈå≤Á∑®ÈõÜ" }
                                    }
                                    div(classes = "card-body") {
                                        form(action = "/flightlogs/ui/${flightLog.id}", method = FormMethod.post) {
                                            hiddenInput { name = "_method"; value = "put" }
                                            div(classes = "row") {
                                                div(classes = "col-md-6 mb-3") {
                                                    label(classes = "form-label") { +"È£õË°åÂπ¥ÊúàÊó•" }
                                                    textInput(classes = "form-control") { 
                                                        name = "flightDate"
                                                        type = InputType.date
                                                        value = flightLog.flightDate
                                                        required = true
                                                    }
                                                }
                                                div(classes = "col-md-6 mb-3") {
                                                    label(classes = "form-label") { +"Èõ¢ÁùÄÈô∏Â†¥ÊâÄ" }
                                                    textInput(classes = "form-control") { 
                                                        name = "takeoffLandingLocation"
                                                        value = flightLog.takeoffLandingLocation
                                                        required = true
                                                    }
                                                }
                                            }
                                            div(classes = "row") {
                                                div(classes = "col-md-6 mb-3") {
                                                    label(classes = "form-label") { +"Èõ¢ÁùÄÈô∏ÊôÇÂàª" }
                                                    textInput(classes = "form-control") { 
                                                        name = "takeoffLandingTime"
                                                        type = InputType.time
                                                        value = flightLog.takeoffLandingTime
                                                        required = true
                                                    }
                                                }
                                                div(classes = "col-md-6 mb-3") {
                                                    label(classes = "form-label") { +"È£õË°åÊôÇÈñì" }
                                                    textInput(classes = "form-control") { 
                                                        name = "flightDuration"
                                                        value = flightLog.flightDuration
                                                        required = true
                                                    }
                                                }
                                            }
                                            div(classes = "row") {
                                                div(classes = "col-md-6 mb-3") {
                                                    label(classes = "form-label") { +"È£õË°å„Åï„Åõ„ÅüËÄÖ„ÅÆÊ∞èÂêç" }
                                                    textInput(classes = "form-control") { 
                                                        name = "pilotName"
                                                        value = flightLog.pilotName
                                                        required = true
                                                    }
                                                }
                                                div(classes = "col-md-6 mb-3") {
                                                    label(classes = "form-label") { +"‰∏çÂÖ∑Âêà„ÇÑ„Åù„ÅÆÂØæÂøúÔºà‰ªªÊÑèÔºâ" }
                                                    textInput(classes = "form-control") { 
                                                        name = "issuesAndResponses"
                                                        value = flightLog.issuesAndResponses ?: ""
                                                    }
                                                }
                                            }
                                            div(classes = "d-grid gap-2 d-md-block") {
                                                submitInput(classes = "btn btn-primary") { value = "Êõ¥Êñ∞" }
                                            }
                                        }
                                        hr()
                                        form(action = "/flightlogs/ui/${flightLog.id}", method = FormMethod.post) {
                                            hiddenInput { name = "_method"; value = "delete" }
                                            div(classes = "d-grid") {
                                                submitInput(classes = "btn btn-danger") { 
                                                    value = "ÂâäÈô§"
                                                    attributes["onclick"] = "return confirm('Êú¨ÂΩì„Å´ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        // HTML„Éï„Ç©„Éº„É†„Åã„Çâ„ÅÆPOST„É™„ÇØ„Ç®„Çπ„Éà„ÇíPUT/DELETE/POST„Å´ÊåØ„ÇäÂàÜ„Åë
        post("/{id}") {
            val session = call.sessions.get<UserSession>()
            if (session == null) {
                call.respondRedirect("/login")
                return@post
            }
            val id = call.parameters["id"]?.toIntOrNull()
            val params = call.receiveParameters()
            val method = params["_method"]
            when (method) {
                "put" -> {
                    if (id != null) {
                        val flightDate = params["flightDate"] ?: ""
                        val takeoffLandingLocation = params["takeoffLandingLocation"] ?: ""
                        val takeoffLandingTime = params["takeoffLandingTime"] ?: ""
                        val flightDuration = params["flightDuration"] ?: ""
                        val pilotName = params["pilotName"] ?: ""
                        val issuesAndResponses = params["issuesAndResponses"]
                        val updated = flightLogService.update(id, FlightLog(id, flightDate, takeoffLandingLocation, takeoffLandingTime, flightDuration, pilotName, issuesAndResponses, session.userId), session.userId)
                        if (updated) {
                            call.respondRedirect("/flightlogs/ui")
                        } else {
                            call.respond(HttpStatusCode.NotFound)
                        }
                    } else {
                        call.respond(HttpStatusCode.BadRequest)
                    }
                }
                "delete" -> {
                    if (id != null && flightLogService.delete(id, session.userId)) {
                        call.respondRedirect("/flightlogs/ui")
                    } else {
                        call.respond(HttpStatusCode.NotFound)
                    }
                }
                else -> call.respond(HttpStatusCode.BadRequest)
            }
        }
        // Êñ∞Ë¶è‰ΩúÊàê„Éï„Ç©„Éº„É†Áî®
        post {
            val session = call.sessions.get<UserSession>()
            if (session == null) {
                call.respondRedirect("/login")
                return@post
            }
            val contentType = call.request.contentType()
            if (contentType.match(ContentType.Application.FormUrlEncoded)) {
                val params = call.receiveParameters()
                val flightDate = params["flightDate"] ?: ""
                val takeoffLandingLocation = params["takeoffLandingLocation"] ?: ""
                val takeoffLandingTime = params["takeoffLandingTime"] ?: ""
                val flightDuration = params["flightDuration"] ?: ""
                val pilotName = params["pilotName"] ?: ""
                val issuesAndResponses = params["issuesAndResponses"]
                val created = flightLogService.add(FlightLog(0, flightDate, takeoffLandingLocation, takeoffLandingTime, flightDuration, pilotName, issuesAndResponses, session.userId))
                call.respondRedirect("/flightlogs/ui")
            } else {
                val flightLog = call.receive<FlightLog>()
                val created = flightLogService.add(flightLog.copy(userId = session.userId))
                call.respond(HttpStatusCode.Created, created)
            }
        }
    }
}