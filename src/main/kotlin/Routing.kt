package com.example

import io.ktor.server.application.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import io.ktor.server.request.*
import io.ktor.server.sessions.*
import io.ktor.http.*
import com.opendronediary.model.FlightLog
import com.opendronediary.model.DailyInspectionRecord
import com.opendronediary.model.MaintenanceInspectionRecord
import com.opendronediary.model.User
import com.opendronediary.model.UserSession
import com.opendronediary.repository.FlightLogRepository
import com.opendronediary.repository.DailyInspectionRecordRepository
import com.opendronediary.repository.MaintenanceInspectionRecordRepository
import com.opendronediary.repository.UserRepository
import com.opendronediary.service.FlightLogService
import com.opendronediary.service.DailyInspectionRecordService
import com.opendronediary.service.MaintenanceInspectionRecordService
import com.opendronediary.service.UserService
import io.ktor.server.html.respondHtml
import kotlinx.html.*

// Helper function to create Bootstrap head with CDN links
fun HEAD.bootstrapHead(pageTitle: String) {
    title { +pageTitle }
    meta(charset = "utf-8")
    meta(name = "viewport", content = "width=device-width, initial-scale=1")
    link(rel = "stylesheet", href = "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css")
    script(src = "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js") { }
}

fun Application.configureRouting() {
    val flightLogRepository = FlightLogRepository()
    val flightLogService = FlightLogService(flightLogRepository)
    val dailyInspectionRecordRepository = DailyInspectionRecordRepository()
    val dailyInspectionRecordService = DailyInspectionRecordService(dailyInspectionRecordRepository)
    val maintenanceInspectionRecordRepository = MaintenanceInspectionRecordRepository()
    val maintenanceInspectionRecordService = MaintenanceInspectionRecordService(maintenanceInspectionRecordRepository)
    val userRepository = UserRepository()
    val userService = UserService(userRepository)
    
    routing {
        get("/") {
            val session = call.sessions.get<UserSession>()
            call.respondHtml {
                head { bootstrapHead("„Éà„ÉÉ„Éó") }
                body {
                    div(classes = "container mt-5") {
                        div(classes = "row justify-content-center") {
                            div(classes = "col-md-8") {
                                div(classes = "card") {
                                    div(classes = "card-header") {
                                        h1(classes = "card-title mb-0") { +"üõ©Ô∏è OpenDroneDiary üöÅ" }
                                    }
                                    div(classes = "card-body") {
                                        if (session != null) {
                                            div(classes = "alert alert-success") { +"„É≠„Ç∞„Ç§„É≥‰∏≠: ${session.username}" }
                                            div(classes = "d-grid gap-2") {
                                                a(href = "/flightlogs/ui", classes = "btn btn-primary") { +"È£õË°åË®òÈå≤‰∏ÄË¶ß„Å∏" }
                                                a(href = "/dailyinspections/ui", classes = "btn btn-primary") { +"Êó•Â∏∏ÁÇπÊ§úË®òÈå≤‰∏ÄË¶ß„Å∏" }
                                                a(href = "/maintenanceinspections/ui", classes = "btn btn-primary") { +"ÁÇπÊ§úÊï¥ÂÇôË®òÈå≤‰∏ÄË¶ß„Å∏" }
                                                a(href = "/logout", classes = "btn btn-outline-secondary") { +"„É≠„Ç∞„Ç¢„Ç¶„Éà" }
                                            }
                                        } else {
                                            p(classes = "card-text") { +"„Éâ„É≠„Éº„É≥„ÅÆÈ£õË°åÊó•Ë™å„ÇíÁÆ°ÁêÜ„Åô„Çã„Åü„ÇÅ„ÅÆ„Ç™„Éº„Éó„É≥„ÇΩ„Éº„Çπ„ÅÆ„ÉÑ„Éº„É´„Åß„Åô„ÄÇ" }
                                            div(classes = "d-grid gap-2") {
                                                a(href = "/login", classes = "btn btn-primary") { +"„É≠„Ç∞„Ç§„É≥" }
                                                a(href = "/register", classes = "btn btn-outline-primary") { +"„É¶„Éº„Ç∂„ÉºÁôªÈå≤" }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        // User authentication routes
        get("/login") {
            call.respondHtml {
                head { bootstrapHead("„É≠„Ç∞„Ç§„É≥") }
                body {
                    div(classes = "container mt-5") {
                        div(classes = "row justify-content-center") {
                            div(classes = "col-md-6") {
                                div(classes = "card") {
                                    div(classes = "card-header") {
                                        h1(classes = "card-title mb-0") { +"„É≠„Ç∞„Ç§„É≥" }
                                    }
                                    div(classes = "card-body") {
                                        form(action = "/login", method = FormMethod.post) {
                                            div(classes = "mb-3") {
                                                label(classes = "form-label") { +"„É¶„Éº„Ç∂„ÉºÂêç" }
                                                textInput(classes = "form-control") { 
                                                    name = "username"
                                                    placeholder = "„É¶„Éº„Ç∂„ÉºÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                    required = true
                                                }
                                            }
                                            div(classes = "mb-3") {
                                                label(classes = "form-label") { +"„Éë„Çπ„ÉØ„Éº„Éâ" }
                                                passwordInput(classes = "form-control") { 
                                                    name = "password"
                                                    placeholder = "„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                    required = true
                                                }
                                            }
                                            div(classes = "d-grid") {
                                                submitInput(classes = "btn btn-primary") { value = "„É≠„Ç∞„Ç§„É≥" }
                                            }
                                        }
                                        hr()
                                        div(classes = "text-center") {
                                            a(href = "/register", classes = "btn btn-link") { +"„É¶„Éº„Ç∂„ÉºÁôªÈå≤„ÅØ„Åì„Å°„Çâ" }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        post("/login") {
            val params = call.receiveParameters()
            val username = params["username"] ?: ""
            val password = params["password"] ?: ""
            
            val user = userService.login(username, password)
            if (user != null) {
                call.sessions.set(UserSession(user.id, user.username))
                call.respondRedirect("/")
            } else {
                call.respondHtml(HttpStatusCode.Unauthorized) {
                    head { bootstrapHead("„É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº") }
                    body {
                        div(classes = "container mt-5") {
                            div(classes = "row justify-content-center") {
                                div(classes = "col-md-6") {
                                    div(classes = "card") {
                                        div(classes = "card-header") {
                                            h1(classes = "card-title mb-0") { +"„É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº" }
                                        }
                                        div(classes = "card-body") {
                                            div(classes = "alert alert-danger") {
                                                +"„É¶„Éº„Ç∂„ÉºÂêç„Åæ„Åü„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÈñìÈÅï„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ"
                                            }
                                            a(href = "/login", classes = "btn btn-primary") { +"Êàª„Çã" }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        get("/register") {
            call.respondHtml {
                head { bootstrapHead("„É¶„Éº„Ç∂„ÉºÁôªÈå≤") }
                body {
                    div(classes = "container mt-5") {
                        div(classes = "row justify-content-center") {
                            div(classes = "col-md-6") {
                                div(classes = "card") {
                                    div(classes = "card-header") {
                                        h1(classes = "card-title mb-0") { +"„É¶„Éº„Ç∂„ÉºÁôªÈå≤" }
                                    }
                                    div(classes = "card-body") {
                                        form(action = "/register", method = FormMethod.post) {
                                            div(classes = "mb-3") {
                                                label(classes = "form-label") { +"„É¶„Éº„Ç∂„ÉºÂêç" }
                                                textInput(classes = "form-control") { 
                                                    name = "username"
                                                    placeholder = "„É¶„Éº„Ç∂„ÉºÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                    required = true
                                                }
                                            }
                                            div(classes = "mb-3") {
                                                label(classes = "form-label") { +"„Éë„Çπ„ÉØ„Éº„Éâ" }
                                                passwordInput(classes = "form-control") { 
                                                    name = "password"
                                                    placeholder = "„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                    required = true
                                                }
                                            }
                                            div(classes = "d-grid") {
                                                submitInput(classes = "btn btn-success") { value = "ÁôªÈå≤" }
                                            }
                                        }
                                        hr()
                                        div(classes = "text-center") {
                                            a(href = "/login", classes = "btn btn-link") { +"„É≠„Ç∞„Ç§„É≥„ÅØ„Åì„Å°„Çâ" }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        post("/register") {
            val params = call.receiveParameters()
            val username = params["username"] ?: ""
            val password = params["password"] ?: ""
            
            if (username.isBlank() || password.isBlank()) {
                call.respondHtml(HttpStatusCode.BadRequest) {
                    head { bootstrapHead("ÁôªÈå≤„Ç®„É©„Éº") }
                    body {
                        div(classes = "container mt-5") {
                            div(classes = "row justify-content-center") {
                                div(classes = "col-md-6") {
                                    div(classes = "card") {
                                        div(classes = "card-header") {
                                            h1(classes = "card-title mb-0") { +"ÂÖ•Âäõ„Ç®„É©„Éº" }
                                        }
                                        div(classes = "card-body") {
                                            div(classes = "alert alert-danger") {
                                                +"„É¶„Éº„Ç∂„ÉºÂêç„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÅØÂøÖÈ†à„Åß„Åô„ÄÇ"
                                            }
                                            a(href = "/register", classes = "btn btn-primary") { +"Êàª„Çã" }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return@post
            }
            
            val user = userService.register(username, password)
            if (user != null) {
                call.sessions.set(UserSession(user.id, user.username))
                call.respondRedirect("/")
            } else {
                call.respondHtml(HttpStatusCode.Conflict) {
                    head { bootstrapHead("ÁôªÈå≤„Ç®„É©„Éº") }
                    body {
                        div(classes = "container mt-5") {
                            div(classes = "row justify-content-center") {
                                div(classes = "col-md-6") {
                                    div(classes = "card") {
                                        div(classes = "card-header") {
                                            h1(classes = "card-title mb-0") { +"ÁôªÈå≤„Ç®„É©„Éº" }
                                        }
                                        div(classes = "card-body") {
                                            div(classes = "alert alert-warning") {
                                                +"„Åù„ÅÆ„É¶„Éº„Ç∂„ÉºÂêç„ÅØÊó¢„Å´‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ"
                                            }
                                            a(href = "/register", classes = "btn btn-primary") { +"Êàª„Çã" }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        get("/logout") {
            call.sessions.clear<UserSession>()
            call.respondRedirect("/")
        }
        
        // È£õË°åË®òÈå≤ CRUD - Authentication required
        route("/flightlogs") {
            get {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@get
                }
                call.respond(flightLogService.getAllByUserId(session.userId))
            }
            get("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@get
                }
                val id = call.parameters["id"]?.toIntOrNull()
                val flightLog = id?.let { flightLogService.getByIdAndUserId(it, session.userId) }
                if (flightLog != null) {
                    call.respond(flightLog)
                } else {
                    call.respond(HttpStatusCode.NotFound)
                }
            }
            post {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@post
                }
                val contentType = call.request.contentType()
                if (contentType.match(ContentType.Application.FormUrlEncoded)) {
                    val params = call.receiveParameters()
                    val flightDate = params["flightDate"] ?: ""
                    val takeoffLandingLocation = params["takeoffLandingLocation"] ?: ""
                    val takeoffLandingTime = params["takeoffLandingTime"] ?: ""
                    val flightDuration = params["flightDuration"] ?: ""
                    val pilotName = params["pilotName"] ?: ""
                    val issuesAndResponses = params["issuesAndResponses"]
                    val created = flightLogService.add(FlightLog(0, flightDate, takeoffLandingLocation, takeoffLandingTime, flightDuration, pilotName, issuesAndResponses, session.userId))
                    call.respondRedirect("/flightlogs/ui")
                } else {
                    val flightLog = call.receive<FlightLog>()
                    val created = flightLogService.add(flightLog.copy(userId = session.userId))
                    call.respond(HttpStatusCode.Created, created)
                }
            }
            put("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@put
                }
                val id = call.parameters["id"]?.toIntOrNull()
                val flightLog = call.receive<FlightLog>()
                if (id != null && flightLogService.update(id, flightLog, session.userId)) {
                    call.respond(HttpStatusCode.OK)
                } else {
                    call.respond(HttpStatusCode.NotFound)
                }
            }
            delete("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@delete
                }
                val id = call.parameters["id"]?.toIntOrNull()
                if (id != null && flightLogService.delete(id, session.userId)) {
                    call.respond(HttpStatusCode.NoContent)
                } else {
                    call.respond(HttpStatusCode.NotFound)
                }
            }
        }
        // È£õË°åË®òÈå≤ UI (HTMLÁîªÈù¢) - Authentication required
        route("/flightlogs/ui") {
            get {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respondRedirect("/login")
                    return@get
                }
                val flightLogs = flightLogService.getAllByUserId(session.userId)
                call.respondHtml {
                    head { bootstrapHead("È£õË°åË®òÈå≤‰∏ÄË¶ß") }
                    body {
                        nav(classes = "navbar navbar-expand-lg navbar-dark bg-dark") {
                            div(classes = "container") {
                                a(href = "/", classes = "navbar-brand") { +"üõ©Ô∏è OpenDroneDiary" }
                                div(classes = "navbar-nav ms-auto") {
                                    span(classes = "navbar-text me-3") { +"„É≠„Ç∞„Ç§„É≥‰∏≠: ${session.username}" }
                                    a(href = "/logout", classes = "btn btn-outline-light btn-sm") { +"„É≠„Ç∞„Ç¢„Ç¶„Éà" }
                                }
                            }
                        }
                        div(classes = "container mt-4") {
                            div(classes = "row") {
                                div(classes = "col-12") {
                                    div(classes = "card") {
                                        div(classes = "card-header d-flex justify-content-between align-items-center") {
                                            h1(classes = "card-title mb-0") { +"È£õË°åË®òÈå≤‰∏ÄË¶ß" }
                                            a(href = "/", classes = "btn btn-outline-primary btn-sm") { +"„Éà„ÉÉ„Éó„Å∏" }
                                        }
                                        div(classes = "card-body") {
                                            if (flightLogs.isEmpty()) {
                                                div(classes = "alert alert-info") { +"„Åæ„Å†È£õË°åË®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ‰∏ã„ÅÆ„Éï„Ç©„Éº„É†„Åã„ÇâÊñ∞Ë¶è‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" }
                                            } else {
                                                div(classes = "table-responsive") {
                                                    table(classes = "table table-striped table-hover") {
                                                        thead(classes = "table-dark") {
                                                            tr {
                                                                th { +"ID" }
                                                                th { +"È£õË°åÊó•" }
                                                                th { +"Èõ¢ÁùÄÈô∏Â†¥ÊâÄ" }
                                                                th { +"ÊôÇÂàª" }
                                                                th { +"È£õË°åÊôÇÈñì" }
                                                                th { +"ÊìçÁ∏¶ËÄÖ" }
                                                                th(classes = "text-center") { +"Êìç‰Ωú" }
                                                            }
                                                        }
                                                        tbody {
                                                            flightLogs.forEach { flightLog ->
                                                                tr {
                                                                    td { +flightLog.id.toString() }
                                                                    td { +flightLog.flightDate }
                                                                    td { +flightLog.takeoffLandingLocation }
                                                                    td { +flightLog.takeoffLandingTime }
                                                                    td { +flightLog.flightDuration }
                                                                    td { +flightLog.pilotName }
                                                                    td(classes = "text-center") {
                                                                        a(href = "/flightlogs/ui/${flightLog.id}", classes = "btn btn-sm btn-outline-primary me-2") { +"Á∑®ÈõÜ" }
                                                                        form(action = "/flightlogs/ui/${flightLog.id}", method = FormMethod.post, classes = "d-inline") {
                                                                            hiddenInput { name = "_method"; value = "delete" }
                                                                            submitInput(classes = "btn btn-sm btn-outline-danger") { 
                                                                                value = "ÂâäÈô§"
                                                                                attributes["onclick"] = "return confirm('Êú¨ÂΩì„Å´ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    div(classes = "card mt-4") {
                                        div(classes = "card-header") {
                                            h2(classes = "card-title mb-0") { +"Êñ∞Ë¶èÈ£õË°åË®òÈå≤‰ΩúÊàê" }
                                        }
                                        div(classes = "card-body") {
                                            form(action = "/flightlogs", method = FormMethod.post) {
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"È£õË°åÂπ¥ÊúàÊó•" }
                                                        textInput(classes = "form-control") { 
                                                            name = "flightDate"
                                                            type = InputType.date
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"Èõ¢ÁùÄÈô∏Â†¥ÊâÄ" }
                                                        textInput(classes = "form-control") { 
                                                            name = "takeoffLandingLocation"
                                                            placeholder = "Èõ¢ÁùÄÈô∏Â†¥ÊâÄ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                            required = true
                                                        }
                                                    }
                                                }
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"Èõ¢ÁùÄÈô∏ÊôÇÂàª" }
                                                        textInput(classes = "form-control") { 
                                                            name = "takeoffLandingTime"
                                                            type = InputType.time
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"È£õË°åÊôÇÈñì" }
                                                        textInput(classes = "form-control") { 
                                                            name = "flightDuration"
                                                            placeholder = "‰æã: 1ÊôÇÈñì30ÂàÜ"
                                                            required = true
                                                        }
                                                    }
                                                }
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"È£õË°å„Åï„Åõ„ÅüËÄÖ„ÅÆÊ∞èÂêç" }
                                                        textInput(classes = "form-control") { 
                                                            name = "pilotName"
                                                            placeholder = "ÊìçÁ∏¶ËÄÖÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"‰∏çÂÖ∑Âêà„ÇÑ„Åù„ÅÆÂØæÂøúÔºà‰ªªÊÑèÔºâ" }
                                                        textInput(classes = "form-control") { 
                                                            name = "issuesAndResponses"
                                                            placeholder = "‰∏çÂÖ∑Âêà„Åå„ÅÇ„Çå„Å∞Ë®òËºâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                        }
                                                    }
                                                }
                                                div(classes = "d-grid") {
                                                    submitInput(classes = "btn btn-success") { value = "È£õË°åË®òÈå≤„ÇíËøΩÂä†" }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            get("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respondRedirect("/login")
                    return@get
                }
                val id = call.parameters["id"]?.toIntOrNull()
                val flightLog = id?.let { flightLogService.getByIdAndUserId(it, session.userId) }
                if (flightLog == null) {
                    call.respond(HttpStatusCode.NotFound)
                    return@get
                }
                call.respondHtml {
                    head { bootstrapHead("È£õË°åË®òÈå≤Á∑®ÈõÜ") }
                    body {
                        nav(classes = "navbar navbar-expand-lg navbar-dark bg-dark") {
                            div(classes = "container") {
                                a(href = "/", classes = "navbar-brand") { +"üõ©Ô∏è OpenDroneDiary" }
                                div(classes = "navbar-nav ms-auto") {
                                    a(href = "/flightlogs/ui", classes = "btn btn-outline-light btn-sm me-2") { +"‰∏ÄË¶ß„Å∏Êàª„Çã" }
                                    a(href = "/logout", classes = "btn btn-outline-light btn-sm") { +"„É≠„Ç∞„Ç¢„Ç¶„Éà" }
                                }
                            }
                        }
                        div(classes = "container mt-4") {
                            div(classes = "row justify-content-center") {
                                div(classes = "col-md-8") {
                                    div(classes = "card") {
                                        div(classes = "card-header") {
                                            h1(classes = "card-title mb-0") { +"È£õË°åË®òÈå≤Á∑®ÈõÜ" }
                                        }
                                        div(classes = "card-body") {
                                            form(action = "/flightlogs/ui/${flightLog.id}", method = FormMethod.post) {
                                                hiddenInput { name = "_method"; value = "put" }
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"È£õË°åÂπ¥ÊúàÊó•" }
                                                        textInput(classes = "form-control") { 
                                                            name = "flightDate"
                                                            type = InputType.date
                                                            value = flightLog.flightDate
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"Èõ¢ÁùÄÈô∏Â†¥ÊâÄ" }
                                                        textInput(classes = "form-control") { 
                                                            name = "takeoffLandingLocation"
                                                            value = flightLog.takeoffLandingLocation
                                                            required = true
                                                        }
                                                    }
                                                }
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"Èõ¢ÁùÄÈô∏ÊôÇÂàª" }
                                                        textInput(classes = "form-control") { 
                                                            name = "takeoffLandingTime"
                                                            type = InputType.time
                                                            value = flightLog.takeoffLandingTime
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"È£õË°åÊôÇÈñì" }
                                                        textInput(classes = "form-control") { 
                                                            name = "flightDuration"
                                                            value = flightLog.flightDuration
                                                            required = true
                                                        }
                                                    }
                                                }
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"È£õË°å„Åï„Åõ„ÅüËÄÖ„ÅÆÊ∞èÂêç" }
                                                        textInput(classes = "form-control") { 
                                                            name = "pilotName"
                                                            value = flightLog.pilotName
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"‰∏çÂÖ∑Âêà„ÇÑ„Åù„ÅÆÂØæÂøúÔºà‰ªªÊÑèÔºâ" }
                                                        textInput(classes = "form-control") { 
                                                            name = "issuesAndResponses"
                                                            value = flightLog.issuesAndResponses ?: ""
                                                        }
                                                    }
                                                }
                                                div(classes = "d-grid gap-2 d-md-block") {
                                                    submitInput(classes = "btn btn-primary") { value = "Êõ¥Êñ∞" }
                                                }
                                            }
                                            hr()
                                            form(action = "/flightlogs/ui/${flightLog.id}", method = FormMethod.post) {
                                                hiddenInput { name = "_method"; value = "delete" }
                                                div(classes = "d-grid") {
                                                    submitInput(classes = "btn btn-danger") { 
                                                        value = "ÂâäÈô§"
                                                        attributes["onclick"] = "return confirm('Êú¨ÂΩì„Å´ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // HTML„Éï„Ç©„Éº„É†„Åã„Çâ„ÅÆPOST„É™„ÇØ„Ç®„Çπ„Éà„ÇíPUT/DELETE/POST„Å´ÊåØ„ÇäÂàÜ„Åë
            post("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respondRedirect("/login")
                    return@post
                }
                val id = call.parameters["id"]?.toIntOrNull()
                val params = call.receiveParameters()
                val method = params["_method"]
                when (method) {
                    "put" -> {
                        if (id != null) {
                            val flightDate = params["flightDate"] ?: ""
                            val takeoffLandingLocation = params["takeoffLandingLocation"] ?: ""
                            val takeoffLandingTime = params["takeoffLandingTime"] ?: ""
                            val flightDuration = params["flightDuration"] ?: ""
                            val pilotName = params["pilotName"] ?: ""
                            val issuesAndResponses = params["issuesAndResponses"]
                            val updated = flightLogService.update(id, FlightLog(id, flightDate, takeoffLandingLocation, takeoffLandingTime, flightDuration, pilotName, issuesAndResponses, session.userId), session.userId)
                            if (updated) {
                                call.respondRedirect("/flightlogs/ui")
                            } else {
                                call.respond(HttpStatusCode.NotFound)
                            }
                        } else {
                            call.respond(HttpStatusCode.BadRequest)
                        }
                    }
                    "delete" -> {
                        if (id != null && flightLogService.delete(id, session.userId)) {
                            call.respondRedirect("/flightlogs/ui")
                        } else {
                            call.respond(HttpStatusCode.NotFound)
                        }
                    }
                    else -> call.respond(HttpStatusCode.BadRequest)
                }
            }
            // Êñ∞Ë¶è‰ΩúÊàê„Éï„Ç©„Éº„É†Áî®
            post {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respondRedirect("/login")
                    return@post
                }
                val contentType = call.request.contentType()
                if (contentType.match(ContentType.Application.FormUrlEncoded)) {
                    val params = call.receiveParameters()
                    val flightDate = params["flightDate"] ?: ""
                    val takeoffLandingLocation = params["takeoffLandingLocation"] ?: ""
                    val takeoffLandingTime = params["takeoffLandingTime"] ?: ""
                    val flightDuration = params["flightDuration"] ?: ""
                    val pilotName = params["pilotName"] ?: ""
                    val issuesAndResponses = params["issuesAndResponses"]
                    val created = flightLogService.add(FlightLog(0, flightDate, takeoffLandingLocation, takeoffLandingTime, flightDuration, pilotName, issuesAndResponses, session.userId))
                    call.respondRedirect("/flightlogs/ui")
                } else {
                    val flightLog = call.receive<FlightLog>()
                    val created = flightLogService.add(flightLog.copy(userId = session.userId))
                    call.respond(HttpStatusCode.Created, created)
                }
            }
        }
        
        // Daily Inspection Record UI routes
        route("/dailyinspections/ui") {
            get {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respondRedirect("/login")
                    return@get
                }
                val dailyInspectionRecords = dailyInspectionRecordService.getAllByUserId(session.userId)
                call.respondHtml {
                    head { bootstrapHead("Êó•Â∏∏ÁÇπÊ§úË®òÈå≤‰∏ÄË¶ß") }
                    body {
                        div(classes = "container mt-5") {
                            div(classes = "row") {
                                div(classes = "col-12") {
                                    div(classes = "card") {
                                        div(classes = "card-header d-flex justify-content-between align-items-center") {
                                            h1(classes = "card-title mb-0") { +"Êó•Â∏∏ÁÇπÊ§úË®òÈå≤‰∏ÄË¶ß" }
                                            a(href = "/", classes = "btn btn-outline-primary btn-sm") { +"„Éà„ÉÉ„Éó„Å∏" }
                                        }
                                        div(classes = "card-body") {
                                            if (dailyInspectionRecords.isEmpty()) {
                                                div(classes = "alert alert-info") { +"„Åæ„Å†Êó•Â∏∏ÁÇπÊ§úË®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ‰∏ã„ÅÆ„Éï„Ç©„Éº„É†„Åã„ÇâÊñ∞Ë¶è‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" }
                                            } else {
                                                div(classes = "table-responsive") {
                                                    table(classes = "table table-striped table-hover") {
                                                        thead(classes = "table-dark") {
                                                            tr {
                                                                th { +"ID" }
                                                                th { +"ÁÇπÊ§úÊó•" }
                                                                th { +"Â†¥ÊâÄ" }
                                                                th { +"ÂÆüÊñΩËÄÖ" }
                                                                th { +"ÁÇπÊ§úÁµêÊûú" }
                                                                th(classes = "text-center") { +"Êìç‰Ωú" }
                                                            }
                                                        }
                                                        tbody {
                                                            dailyInspectionRecords.forEach { record ->
                                                                tr {
                                                                    td { +"${record.id}" }
                                                                    td { +record.inspectionDate }
                                                                    td { +record.location }
                                                                    td { +record.inspectorName }
                                                                    td { +record.inspectionResult }
                                                                    td(classes = "text-center") {
                                                                        a(href = "/dailyinspections/ui/${record.id}", classes = "btn btn-sm btn-outline-primary me-2") { +"Á∑®ÈõÜ" }
                                                                        form(action = "/dailyinspections/ui/${record.id}", method = FormMethod.post, classes = "d-inline") {
                                                                            hiddenInput { name = "_method"; value = "delete" }
                                                                            submitInput(classes = "btn btn-sm btn-outline-danger") { 
                                                                                value = "ÂâäÈô§"
                                                                                attributes["onclick"] = "return confirm('Êú¨ÂΩì„Å´ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    div(classes = "card mt-4") {
                                        div(classes = "card-header") {
                                            h2(classes = "card-title mb-0") { +"Êñ∞Ë¶èÊó•Â∏∏ÁÇπÊ§úË®òÈå≤‰ΩúÊàê" }
                                        }
                                        div(classes = "card-body") {
                                            form(action = "/dailyinspections", method = FormMethod.post) {
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"ÁÇπÊ§úÂπ¥ÊúàÊó•" }
                                                        textInput(classes = "form-control") { 
                                                            name = "inspectionDate"
                                                            type = InputType.date
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"Â†¥ÊâÄ" }
                                                        textInput(classes = "form-control") { 
                                                            name = "location"
                                                            placeholder = "ÁÇπÊ§úÂ†¥ÊâÄ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                            required = true
                                                        }
                                                    }
                                                }
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"ÂÆüÊñΩËÄÖ„ÅÆÊ∞èÂêç" }
                                                        textInput(classes = "form-control") { 
                                                            name = "inspectorName"
                                                            placeholder = "ÂÆüÊñΩËÄÖ„ÅÆÊ∞èÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"ÁÇπÊ§úÁµêÊûú" }
                                                        textArea(classes = "form-control") { 
                                                            name = "inspectionResult"
                                                            placeholder = "ÁÇπÊ§úÁµêÊûú„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                            attributes["rows"] = "3"
                                                            required = true
                                                        }
                                                    }
                                                }
                                                div(classes = "d-grid") {
                                                    submitInput(classes = "btn btn-success") { value = "Êó•Â∏∏ÁÇπÊ§úË®òÈå≤„ÇíËøΩÂä†" }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            get("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respondRedirect("/login")
                    return@get
                }
                val id = call.parameters["id"]?.toIntOrNull()
                val record = id?.let { dailyInspectionRecordService.getByIdAndUserId(it, session.userId) }
                if (record == null) {
                    call.respond(HttpStatusCode.NotFound)
                    return@get
                }
                call.respondHtml {
                    head { bootstrapHead("Êó•Â∏∏ÁÇπÊ§úË®òÈå≤Á∑®ÈõÜ") }
                    body {
                        div(classes = "container mt-5") {
                            div(classes = "row justify-content-center") {
                                div(classes = "col-md-8") {
                                    div(classes = "card") {
                                        div(classes = "card-header d-flex justify-content-between align-items-center") {
                                            h1(classes = "card-title mb-0") { +"Êó•Â∏∏ÁÇπÊ§úË®òÈå≤Á∑®ÈõÜ" }
                                            a(href = "/dailyinspections/ui", classes = "btn btn-outline-light btn-sm me-2") { +"‰∏ÄË¶ß„Å∏Êàª„Çã" }
                                        }
                                        div(classes = "card-body") {
                                            form(action = "/dailyinspections/ui/${record.id}", method = FormMethod.post) {
                                                hiddenInput { name = "_method"; value = "put" }
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"ÁÇπÊ§úÂπ¥ÊúàÊó•" }
                                                        textInput(classes = "form-control") { 
                                                            name = "inspectionDate"
                                                            type = InputType.date
                                                            value = record.inspectionDate
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"Â†¥ÊâÄ" }
                                                        textInput(classes = "form-control") { 
                                                            name = "location"
                                                            value = record.location
                                                            required = true
                                                        }
                                                    }
                                                }
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"ÂÆüÊñΩËÄÖ„ÅÆÊ∞èÂêç" }
                                                        textInput(classes = "form-control") { 
                                                            name = "inspectorName"
                                                            value = record.inspectorName
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"ÁÇπÊ§úÁµêÊûú" }
                                                        textArea(classes = "form-control") { 
                                                            name = "inspectionResult"
                                                            attributes["rows"] = "3"
                                                            required = true
                                                            +record.inspectionResult
                                                        }
                                                    }
                                                }
                                                div(classes = "d-grid gap-2 d-md-block") {
                                                    submitInput(classes = "btn btn-primary") { value = "Êõ¥Êñ∞" }
                                                }
                                            }
                                            hr()
                                            form(action = "/dailyinspections/ui/${record.id}", method = FormMethod.post) {
                                                hiddenInput { name = "_method"; value = "delete" }
                                                div(classes = "d-grid") {
                                                    submitInput(classes = "btn btn-danger") { 
                                                        value = "ÂâäÈô§"
                                                        attributes["onclick"] = "return confirm('Êú¨ÂΩì„Å´ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            post("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respondRedirect("/login")
                    return@post
                }
                val id = call.parameters["id"]?.toIntOrNull()
                val method = call.receiveParameters()["_method"]
                when (method) {
                    "put" -> {
                        val params = call.receiveParameters()
                        val inspectionDate = params["inspectionDate"] ?: ""
                        val location = params["location"] ?: ""
                        val inspectorName = params["inspectorName"] ?: ""
                        val inspectionResult = params["inspectionResult"] ?: ""
                        if (id != null && inspectionDate.isNotBlank() && location.isNotBlank() && 
                            inspectorName.isNotBlank() && inspectionResult.isNotBlank()) {
                            val updated = dailyInspectionRecordService.update(id, DailyInspectionRecord(id, inspectionDate, location, inspectorName, inspectionResult, session.userId), session.userId)
                            if (updated) {
                                call.respondRedirect("/dailyinspections/ui")
                            } else {
                                call.respond(HttpStatusCode.NotFound)
                            }
                        } else {
                            call.respond(HttpStatusCode.BadRequest)
                        }
                    }
                    "delete" -> {
                        if (id != null && dailyInspectionRecordService.delete(id, session.userId)) {
                            call.respondRedirect("/dailyinspections/ui")
                        } else {
                            call.respond(HttpStatusCode.NotFound)
                        }
                    }
                    else -> call.respond(HttpStatusCode.BadRequest)
                }
            }
            // Êñ∞Ë¶è‰ΩúÊàê„Éï„Ç©„Éº„É†Áî®
            post {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respondRedirect("/login")
                    return@post
                }
                val contentType = call.request.contentType()
                if (contentType.match(ContentType.Application.FormUrlEncoded)) {
                    val params = call.receiveParameters()
                    val inspectionDate = params["inspectionDate"] ?: ""
                    val location = params["location"] ?: ""
                    val inspectorName = params["inspectorName"] ?: ""
                    val inspectionResult = params["inspectionResult"] ?: ""
                    val created = dailyInspectionRecordService.add(DailyInspectionRecord(0, inspectionDate, location, inspectorName, inspectionResult, session.userId))
                    call.respondRedirect("/dailyinspections/ui")
                } else {
                    val record = call.receive<DailyInspectionRecord>()
                    val created = dailyInspectionRecordService.add(record.copy(userId = session.userId))
                    call.respond(HttpStatusCode.Created, created)
                }
            }
        }
        
        // Daily Inspection Record routes
        route("/dailyinspections") {
            get {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@get
                }
                call.respond(dailyInspectionRecordService.getAllByUserId(session.userId))
            }
            get("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@get
                }
                val id = call.parameters["id"]?.toIntOrNull()
                val record = id?.let { dailyInspectionRecordService.getByIdAndUserId(it, session.userId) }
                if (record != null) {
                    call.respond(record)
                } else {
                    call.respond(HttpStatusCode.NotFound)
                }
            }
            post {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@post
                }
                val contentType = call.request.contentType()
                if (contentType.match(ContentType.Application.FormUrlEncoded)) {
                    val params = call.receiveParameters()
                    val inspectionDate = params["inspectionDate"] ?: ""
                    val location = params["location"] ?: ""
                    val inspectorName = params["inspectorName"] ?: ""
                    val inspectionResult = params["inspectionResult"] ?: ""
                    val created = dailyInspectionRecordService.add(DailyInspectionRecord(0, inspectionDate, location, inspectorName, inspectionResult, session.userId))
                    call.respondRedirect("/dailyinspections/ui")
                } else {
                    val record = call.receive<DailyInspectionRecord>()
                    val created = dailyInspectionRecordService.add(record.copy(userId = session.userId))
                    call.respond(HttpStatusCode.Created, created)
                }
            }
            put("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@put
                }
                val id = call.parameters["id"]?.toIntOrNull()
                val record = call.receive<DailyInspectionRecord>()
                if (id != null && dailyInspectionRecordService.update(id, record, session.userId)) {
                    call.respond(HttpStatusCode.OK)
                } else {
                    call.respond(HttpStatusCode.NotFound)
                }
            }
            delete("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@delete
                }
                val id = call.parameters["id"]?.toIntOrNull()
                if (id != null && dailyInspectionRecordService.delete(id, session.userId)) {
                    call.respond(HttpStatusCode.NoContent)
                } else {
                    call.respond(HttpStatusCode.NotFound)
                }
            }
        }
        
        // Maintenance Inspection Record UI routes
        route("/maintenanceinspections/ui") {
            get {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respondRedirect("/login")
                    return@get
                }
                val maintenanceInspectionRecords = maintenanceInspectionRecordService.getAllByUserId(session.userId)
                call.respondHtml {
                    head { bootstrapHead("ÁÇπÊ§úÊï¥ÂÇôË®òÈå≤‰∏ÄË¶ß") }
                    body {
                        div(classes = "container mt-5") {
                            div(classes = "row") {
                                div(classes = "col-12") {
                                    div(classes = "card") {
                                        div(classes = "card-header d-flex justify-content-between align-items-center") {
                                            h1(classes = "card-title mb-0") { +"ÁÇπÊ§úÊï¥ÂÇôË®òÈå≤‰∏ÄË¶ß" }
                                            a(href = "/", classes = "btn btn-outline-primary btn-sm") { +"„Éà„ÉÉ„Éó„Å∏" }
                                        }
                                        div(classes = "card-body") {
                                            if (maintenanceInspectionRecords.isEmpty()) {
                                                div(classes = "alert alert-info") { +"„Åæ„Å†ÁÇπÊ§úÊï¥ÂÇôË®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ‰∏ã„ÅÆ„Éï„Ç©„Éº„É†„Åã„ÇâÊñ∞Ë¶è‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" }
                                            } else {
                                                div(classes = "table-responsive") {
                                                    table(classes = "table table-striped table-hover") {
                                                        thead(classes = "table-dark") {
                                                            tr {
                                                                th { +"ID" }
                                                                th { +"ÁÇπÊ§úÊó•" }
                                                                th { +"Â†¥ÊâÄ" }
                                                                th { +"ÂÆüÊñΩËÄÖ" }
                                                                th { +"ÂÜÖÂÆπ„ÉªÁêÜÁî±" }
                                                                th(classes = "text-center") { +"Êìç‰Ωú" }
                                                            }
                                                        }
                                                        tbody {
                                                            maintenanceInspectionRecords.forEach { record ->
                                                                tr {
                                                                    td { +"${record.id}" }
                                                                    td { +record.inspectionDate }
                                                                    td { +record.location }
                                                                    td { +record.inspectorName }
                                                                    td { +record.contentAndReason }
                                                                    td(classes = "text-center") {
                                                                        a(href = "/maintenanceinspections/ui/${record.id}", classes = "btn btn-sm btn-outline-primary me-2") { +"Á∑®ÈõÜ" }
                                                                        form(action = "/maintenanceinspections/ui/${record.id}", method = FormMethod.post, classes = "d-inline") {
                                                                            hiddenInput { name = "_method"; value = "delete" }
                                                                            submitInput(classes = "btn btn-sm btn-outline-danger") { 
                                                                                value = "ÂâäÈô§"
                                                                                attributes["onclick"] = "return confirm('Êú¨ÂΩì„Å´ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    div(classes = "card mt-4") {
                                        div(classes = "card-header") {
                                            h2(classes = "card-title mb-0") { +"Êñ∞Ë¶èÁÇπÊ§úÊï¥ÂÇôË®òÈå≤‰ΩúÊàê" }
                                        }
                                        div(classes = "card-body") {
                                            form(action = "/maintenanceinspections", method = FormMethod.post) {
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"ÁÇπÊ§úÂπ¥ÊúàÊó•" }
                                                        textInput(classes = "form-control") { 
                                                            name = "inspectionDate"
                                                            type = InputType.date
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"Â†¥ÊâÄ" }
                                                        textInput(classes = "form-control") { 
                                                            name = "location"
                                                            placeholder = "ÁÇπÊ§úÂ†¥ÊâÄ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                            required = true
                                                        }
                                                    }
                                                }
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"ÂÆüÊñΩËÄÖ„ÅÆÊ∞èÂêç" }
                                                        textInput(classes = "form-control") { 
                                                            name = "inspectorName"
                                                            placeholder = "ÂÆüÊñΩËÄÖ„ÅÆÊ∞èÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"ÁÇπÊ§ú„Éª‰øÆÁêÜ„ÉªÊîπÈÄ†„ÉªÊï¥ÂÇô„ÅÆÂÜÖÂÆπ„ÉªÁêÜÁî±" }
                                                        textArea(classes = "form-control") { 
                                                            name = "contentAndReason"
                                                            placeholder = "ÂÜÖÂÆπ„ÉªÁêÜÁî±„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                                            attributes["rows"] = "3"
                                                            required = true
                                                        }
                                                    }
                                                }
                                                div(classes = "d-grid") {
                                                    submitInput(classes = "btn btn-success") { value = "ÁÇπÊ§úÊï¥ÂÇôË®òÈå≤„ÇíËøΩÂä†" }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            get("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respondRedirect("/login")
                    return@get
                }
                val id = call.parameters["id"]?.toIntOrNull()
                val record = id?.let { maintenanceInspectionRecordService.getByIdAndUserId(it, session.userId) }
                if (record == null) {
                    call.respond(HttpStatusCode.NotFound)
                    return@get
                }
                call.respondHtml {
                    head { bootstrapHead("ÁÇπÊ§úÊï¥ÂÇôË®òÈå≤Á∑®ÈõÜ") }
                    body {
                        div(classes = "container mt-5") {
                            div(classes = "row justify-content-center") {
                                div(classes = "col-md-8") {
                                    div(classes = "card") {
                                        div(classes = "card-header d-flex justify-content-between align-items-center") {
                                            h1(classes = "card-title mb-0") { +"ÁÇπÊ§úÊï¥ÂÇôË®òÈå≤Á∑®ÈõÜ" }
                                            a(href = "/maintenanceinspections/ui", classes = "btn btn-outline-light btn-sm me-2") { +"‰∏ÄË¶ß„Å∏Êàª„Çã" }
                                        }
                                        div(classes = "card-body") {
                                            form(action = "/maintenanceinspections/ui/${record.id}", method = FormMethod.post) {
                                                hiddenInput { name = "_method"; value = "put" }
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"ÁÇπÊ§úÂπ¥ÊúàÊó•" }
                                                        textInput(classes = "form-control") { 
                                                            name = "inspectionDate"
                                                            type = InputType.date
                                                            value = record.inspectionDate
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"Â†¥ÊâÄ" }
                                                        textInput(classes = "form-control") { 
                                                            name = "location"
                                                            value = record.location
                                                            required = true
                                                        }
                                                    }
                                                }
                                                div(classes = "row") {
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"ÂÆüÊñΩËÄÖ„ÅÆÊ∞èÂêç" }
                                                        textInput(classes = "form-control") { 
                                                            name = "inspectorName"
                                                            value = record.inspectorName
                                                            required = true
                                                        }
                                                    }
                                                    div(classes = "col-md-6 mb-3") {
                                                        label(classes = "form-label") { +"ÁÇπÊ§ú„Éª‰øÆÁêÜ„ÉªÊîπÈÄ†„ÉªÊï¥ÂÇô„ÅÆÂÜÖÂÆπ„ÉªÁêÜÁî±" }
                                                        textArea(classes = "form-control") { 
                                                            name = "contentAndReason"
                                                            attributes["rows"] = "3"
                                                            required = true
                                                            +record.contentAndReason
                                                        }
                                                    }
                                                }
                                                div(classes = "d-grid gap-2 d-md-block") {
                                                    submitInput(classes = "btn btn-primary") { value = "Êõ¥Êñ∞" }
                                                }
                                            }
                                            hr()
                                            form(action = "/maintenanceinspections/ui/${record.id}", method = FormMethod.post) {
                                                hiddenInput { name = "_method"; value = "delete" }
                                                div(classes = "d-grid") {
                                                    submitInput(classes = "btn btn-danger") { 
                                                        value = "ÂâäÈô§"
                                                        attributes["onclick"] = "return confirm('Êú¨ÂΩì„Å´ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            post("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respondRedirect("/login")
                    return@post
                }
                val id = call.parameters["id"]?.toIntOrNull()
                val method = call.receiveParameters()["_method"]
                when (method) {
                    "put" -> {
                        val params = call.receiveParameters()
                        val inspectionDate = params["inspectionDate"] ?: ""
                        val location = params["location"] ?: ""
                        val inspectorName = params["inspectorName"] ?: ""
                        val contentAndReason = params["contentAndReason"] ?: ""
                        if (id != null && inspectionDate.isNotBlank() && location.isNotBlank() && 
                            inspectorName.isNotBlank() && contentAndReason.isNotBlank()) {
                            val updated = maintenanceInspectionRecordService.update(id, MaintenanceInspectionRecord(id, inspectionDate, location, inspectorName, contentAndReason, session.userId), session.userId)
                            if (updated) {
                                call.respondRedirect("/maintenanceinspections/ui")
                            } else {
                                call.respond(HttpStatusCode.NotFound)
                            }
                        } else {
                            call.respond(HttpStatusCode.BadRequest)
                        }
                    }
                    "delete" -> {
                        if (id != null && maintenanceInspectionRecordService.delete(id, session.userId)) {
                            call.respondRedirect("/maintenanceinspections/ui")
                        } else {
                            call.respond(HttpStatusCode.NotFound)
                        }
                    }
                    else -> call.respond(HttpStatusCode.BadRequest)
                }
            }
            // Êñ∞Ë¶è‰ΩúÊàê„Éï„Ç©„Éº„É†Áî®
            post {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respondRedirect("/login")
                    return@post
                }
                val contentType = call.request.contentType()
                if (contentType.match(ContentType.Application.FormUrlEncoded)) {
                    val params = call.receiveParameters()
                    val inspectionDate = params["inspectionDate"] ?: ""
                    val location = params["location"] ?: ""
                    val inspectorName = params["inspectorName"] ?: ""
                    val contentAndReason = params["contentAndReason"] ?: ""
                    val created = maintenanceInspectionRecordService.add(MaintenanceInspectionRecord(0, inspectionDate, location, inspectorName, contentAndReason, session.userId))
                    call.respondRedirect("/maintenanceinspections/ui")
                } else {
                    val record = call.receive<MaintenanceInspectionRecord>()
                    val created = maintenanceInspectionRecordService.add(record.copy(userId = session.userId))
                    call.respond(HttpStatusCode.Created, created)
                }
            }
        }
        
        // Maintenance Inspection Record routes
        route("/maintenanceinspections") {
            get {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@get
                }
                call.respond(maintenanceInspectionRecordService.getAllByUserId(session.userId))
            }
            get("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@get
                }
                val id = call.parameters["id"]?.toIntOrNull()
                val record = id?.let { maintenanceInspectionRecordService.getByIdAndUserId(it, session.userId) }
                if (record != null) {
                    call.respond(record)
                } else {
                    call.respond(HttpStatusCode.NotFound)
                }
            }
            post {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@post
                }
                val contentType = call.request.contentType()
                if (contentType.match(ContentType.Application.FormUrlEncoded)) {
                    val params = call.receiveParameters()
                    val inspectionDate = params["inspectionDate"] ?: ""
                    val location = params["location"] ?: ""
                    val inspectorName = params["inspectorName"] ?: ""
                    val contentAndReason = params["contentAndReason"] ?: ""
                    val created = maintenanceInspectionRecordService.add(MaintenanceInspectionRecord(0, inspectionDate, location, inspectorName, contentAndReason, session.userId))
                    call.respondRedirect("/maintenanceinspections/ui")
                } else {
                    val record = call.receive<MaintenanceInspectionRecord>()
                    val created = maintenanceInspectionRecordService.add(record.copy(userId = session.userId))
                    call.respond(HttpStatusCode.Created, created)
                }
            }
            put("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@put
                }
                val id = call.parameters["id"]?.toIntOrNull()
                val record = call.receive<MaintenanceInspectionRecord>()
                if (id != null && maintenanceInspectionRecordService.update(id, record, session.userId)) {
                    call.respond(HttpStatusCode.OK)
                } else {
                    call.respond(HttpStatusCode.NotFound)
                }
            }
            delete("/{id}") {
                val session = call.sessions.get<UserSession>()
                if (session == null) {
                    call.respond(HttpStatusCode.Unauthorized)
                    return@delete
                }
                val id = call.parameters["id"]?.toIntOrNull()
                if (id != null && maintenanceInspectionRecordService.delete(id, session.userId)) {
                    call.respond(HttpStatusCode.NoContent)
                } else {
                    call.respond(HttpStatusCode.NotFound)
                }
            }
        }
    }
}
